// DON'T EDIT THIS FILE. IT IS GENERATED BY HEAVEN PACKAGE.

///|
pub(all) struct Receiver {
  buffer : @buffer.T
  listener_map : Map[String, (Json) -> Unit]
}

///|
pub fn get_context() ->
     (
       (String, (Json) -> Unit) -> Unit,
       (String, Json) -> Unit,
       (String, Json, (Json) -> Unit) -> Unit,
     ) {
  (listen_event, send_event, call_event)
}

///|
pub fn call_event(
  event_name : String,
  data : Json,
  callback : (Json) -> Unit
) -> Unit {
  let id = receiver.listener_map.keys().count().to_string()
  listen_event(id, fn(data) {
    callback(data)
    receiver.listener_map.remove(id)
  })
  [Json::string(event_name), data, Json::string(id)] |> send
}

///|
pub fn h_sd(data : Byte) = "__h" "h_sd"

///|
pub fn h_se() = "__h" "h_se"

///|
let receiver : Receiver = { buffer: @buffer.new(), listener_map: Map::new() }

///|
pub fn h_rd(data : Int) -> Unit {
  if data != 0 {
    receiver.buffer.write_char(Int::unsafe_to_char(data))
  }
}

///|
pub fn h_re() -> Unit {
  let message = receiver.buffer.to_bytes().to_unchecked_string()
  match @json.parse?(message) {
    Ok([String(event_name), event_data]) =>
      match event_name {
        _ =>
          match receiver.listener_map.get(event_name) {
            Some(listener) => listener(event_data)
            None => println("No listener for event type: " + event_name)
          }
      }
    Ok(json) => println("type and data not found in \{json}")
    Err(e) => println("Error parsing JSON: \{e}")
  }
  receiver.buffer.reset()
}

///|
pub fn listen_event(event_name : String, callback : (Json) -> Unit) -> Unit {
  receiver.listener_map[event_name] = callback
}

///|
pub fn send_event(event_name : String, event_data : Json) -> Unit {
  [Json::string(event_name), event_data] |> send
}

///|
fn send(body : Json) -> Unit {
  let chars = @json.stringify(body).to_bytes()
  chars.iter().each(fn(c) { h_sd(c) })
  h_se()
}

///|
pub fn addEventListener(
  objectName : String,
  eventName : String,
  callback : (Json) -> Unit
) -> Unit {
  ignore(
    send_event("\{objectName}.addEventListener", [
      Json::string(eventName),
      Json::string("\{objectName}.\{eventName}"),
    ]),
  )
  listen_event("\{objectName}.\{eventName}", callback)
}
